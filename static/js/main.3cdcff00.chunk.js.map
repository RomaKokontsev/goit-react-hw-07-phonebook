{"version":3,"sources":["components/ContactsList/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","components/FormContact/FormContact.module.css","redux/actions.js","redux/operations.js","redux/selectors.js","components/FormContact/FormContact.js","components/ContactsList/ContactListItem/ContactListItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/App/App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","text","includes","getFiteredContacts","ContactForm","useState","setName","setNumber","contactNameId","shortid","generate","contactNumberId","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","s","form","onSubmit","preventDefault","find","alert","label","htmlFor","input","type","onChange","pattern","title","button","btnText","size","color","ContactListItem","contactName","contactNumber","onClickDeleteContact","listItem","listItemText","onClick","ContactList","useEffect","list","map","onDeleteContact","Filter","filterLabel","filterInput","contactsActions","target","App","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,SAAW,kCAAkC,aAAe,sCAAsC,OAAS,kC,mBCA7HD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,YAAc,8B,mBCA1ED,EAAOC,QAAU,CAAC,KAAO,6B,uCCAzBD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,4BAA4B,QAAU,+B,iNCC3JC,EAAuBC,YAClC,iCAEWC,EAAuBD,YAClC,iCAEWE,EAAqBF,YAAa,+BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,yBCTzCU,IAAMC,SAASC,QAAU,wBAEzB,IAyCeC,EALY,CACzBC,cArCoB,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DAC1BD,EAAShB,KADiB,kBAGDW,IAAMO,IAAI,aAHT,gBAGhBC,EAHgB,EAGhBA,KACRH,EAASd,EAAqBiB,IAJN,gDAMxBH,EAASb,EAAmB,EAAD,KANH,yDAAN,uDAsCpBiB,WA5BiB,SAACC,EAAMC,GAAP,8CAAkB,WAAMN,GAAN,mBAAAC,EAAA,6DAC7BM,EAAU,CACdF,OACAC,UAGFN,EAASZ,KAN0B,kBASVO,IAAMa,KAAK,YAAaD,GATd,gBASzBJ,EATyB,EASzBA,KACRH,EAASX,EAAkBc,IAVM,kDAYjCH,EAASV,EAAgB,EAAD,KAZS,0DAAlB,uDA6BjBmB,cAboB,SAAAC,GAAE,8CAAI,WAAMV,GAAN,SAAAC,EAAA,6DAC1BD,EAAST,KADiB,kBAGlBI,IAAMgB,OAAN,oBAA0BD,IAHR,OAIxBV,EAASR,EAAqBkB,IAJN,gDAMxBV,EAASP,EAAmB,EAAD,KANH,yDAAJ,wD,QCvCXmB,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OACtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAqBC,YAChC,CAACP,EAAaI,IACd,SAACF,EAAUG,GAQT,OAP2B,SAAAH,GACzB,IAAMM,EAAmBH,EAAOI,cAChC,OAAOP,EAASG,QAAO,SAAAK,GAAI,OACzBA,EAAKjB,KAAKgB,cAAcE,SAASH,MAI9BI,CAAmBV,M,OCPf,SAASW,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOpB,EAAP,KAAesB,EAAf,KAEMC,EAAgBC,IAAQC,WACxBC,EAAkBF,IAAQC,WAE1B/B,EAAWiC,cACXnB,EAAWoB,YAAYtB,GAEvBuB,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBhC,EAAR,EAAQA,KAAMiC,EAAd,EAAcA,MACd,OAAQjC,GACN,IAAK,OACHsB,EAAQW,GACR,MACF,IAAK,SACHV,EAAUU,GACV,MACF,QACE,SA0BAC,EAAQ,WACZZ,EAAQ,IACRC,EAAU,KAGZ,OACE,uBAAMY,UAAWC,IAAEC,KAAMC,SA5BN,SAAAP,GAGnB,GAFAA,EAAEQ,iBAEW,KAATvC,EAKJ,GAAe,KAAXC,EAAJ,CAKA,GAAIQ,EAAS+B,MAAK,SAAAtC,GAAO,OAAIA,EAAQF,OAASA,KAG5C,OAFAyC,MAAM,GAAD,OAAIzC,EAAJ,kCACLkC,IAGFvC,EAASF,EAAmBM,WAAWC,EAAMC,IAC7CiC,SAVEO,MAAM,oPALNA,MAAM,mLAwBR,UACE,wBAAON,UAAWC,IAAEM,MAAOC,QAASnB,EAApC,iBAEE,uBACEW,UAAWC,IAAEQ,MACbC,KAAK,OACL7C,KAAK,OACLiC,MAAOjC,EACP8C,SAAUhB,EACViB,QAAQ,yHACRC,MAAM,kcACN3C,GAAImB,OAGR,wBAAOW,UAAWC,IAAEM,MAAOC,QAAShB,EAApC,mBAEE,uBACEQ,UAAWC,IAAEQ,MACbC,KAAK,OACL7C,KAAK,SACLiC,MAAOhC,EACP6C,SAAUhB,EACViB,QAAQ,yFACRC,MAAM,giBACN3C,GAAIsB,OAGR,yBAAQQ,UAAWC,IAAEa,OAAQJ,KAAK,SAAlC,UACE,sBAAMV,UAAWC,IAAEc,QAAnB,yBACA,cAAC,IAAD,CAAkBC,KAAK,OAAOC,MAAM,4B,sCC9D7BC,EAtBS,SAAC,GAIlB,IAHLC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,qBAEA,OACE,qBAAIrB,UAAWC,IAAEqB,SAAjB,UACE,uBAAMtB,UAAWC,IAAEsB,aAAnB,UAAkCJ,EAAlC,OACA,sBAAMnB,UAAWC,IAAEsB,aAAnB,SAAkCH,IAClC,yBAAQpB,UAAWC,IAAEa,OAAQJ,KAAK,SAASc,QAASH,EAApD,oBACS,cAAC,IAAD,CAAqBL,KAAK,gBCN1B,SAASS,IACtB,IAAMjE,EAAWiC,cAEjBiC,qBAAU,WACRlE,EAASF,EAAmBC,mBAC3B,CAACC,IACJ,IAAMc,EAAWoB,YAAYhB,GAI7B,OACE,oBAAIsB,UAAWC,IAAE0B,KAAjB,SACGrD,EAASsD,KAAI,gBAAG1D,EAAH,EAAGA,GAAIL,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAEEqD,YAAatD,EACbuD,cAAetD,EACfuD,qBAAsB,kBATN,SAAAnD,GAAE,OAAIV,EAASF,EAAmBW,cAAcC,IASpC2D,CAAgB3D,KAHvCA,Q,qBCOA4D,EAtBA,WACb,IAAMhC,EAAQJ,YAAYlB,GACpBhB,EAAWiC,cAEjB,OACE,wBAAOO,UAAWC,IAAE8B,YAApB,kCAEE,uBACE/B,UAAWC,IAAE+B,YACbtB,KAAK,OACLZ,MAAOA,EACPa,SAAU,SAAAf,GAAC,OAAIpC,EAASyE,EAA6BrC,EAAEsC,OAAOpC,e,MCdvD,SAASqC,IACtB,OACE,qCACE,2CACA,cAAClD,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAACwC,EAAD,O,oDCHAlD,GAAQ6D,YAAc,IAAD,mBACxB1F,GAAuB,SAAC2F,EAAD,YAAMC,WADL,cAExBzF,GAAoB,SAACwB,EAAD,OAAUiE,EAAV,EAAUA,QAAV,4BAA4BjE,GAA5B,CAAmCiE,OAF/B,cAGxBtF,GAAuB,SAACqB,EAAD,OAAUiE,EAAV,EAAUA,QAAV,OACtBjE,EAAMI,QAAO,qBAAGP,KAAgBoE,QAJT,IAOrB7D,GAAS2D,YAAc,GAAD,eACzBlF,GAAe,SAACmF,EAAD,YAAMC,YAGTC,eAAgB,CAC7BhE,SACAE,YCVI+D,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAaaC,GAVDC,YAAe,CAC3BC,QAAS,CACP/E,SAAUgF,IAEZd,cACAe,UAAUC,IClBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SAEE,cAAChB,EAAD,QAIJyB,SAASC,eAAe,W","file":"static/js/main.3cdcff00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__1Bjq6\",\"listItemText\":\"ContactListItem_listItemText__3bne1\",\"button\":\"ContactListItem_button__D5fXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3Gn1g\",\"filterInput\":\"Filter_filterInput__3v4lb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__1QXHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContact_form__1kOBM\",\"label\":\"FormContact_label__jAFqP\",\"input\":\"FormContact_input__3x_Ov\",\"button\":\"FormContact_button__1k_pp\",\"btnText\":\"FormContact_btnText__1GuXL\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\nexport default contactsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const getFiteredContacts = contacts => {\n      const normalizedFilter = filter.toLowerCase();\n      return contacts.filter(text =>\n        text.name.toLowerCase().includes(normalizedFilter),\n      );\n    };\n\n    return getFiteredContacts(contacts);\n  },\n);\n","import React, { useState } from 'react';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport s from './FormContact.module.css';\nimport shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getContacts } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactNameId = shortid.generate();\n  const contactNumberId = shortid.generate();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name === '') {\n      alert(`Введите, пожалуйста, имя контакта.`);\n      return;\n    }\n\n    if (number === '') {\n      alert(`Введите, пожалуйста, номер телефона контакта.`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      reset();\n      return;\n    }\n    dispatch(contactsOperations.addContact(name, number));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={contactNameId}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          id={contactNameId}\n        />\n      </label>\n      <label className={s.label} htmlFor={contactNumberId}>\n        Number\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          id={contactNumberId}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        <span className={s.btnText}>Add contact</span>\n        <AiOutlineUserAdd size=\"20px\" color=\"rgb(130, 27, 112)\" />\n      </button>\n    </form>\n  );\n}\n","import s from './ContactListItem.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { AiOutlineUserDelete } from 'react-icons/ai';\n\nconst ContactListItem = ({\n  contactName,\n  contactNumber,\n  onClickDeleteContact,\n}) => {\n  return (\n    <li className={s.listItem}>\n      <span className={s.listItemText}>{contactName}:</span>\n      <span className={s.listItemText}>{contactNumber}</span>\n      <button className={s.button} type=\"button\" onClick={onClickDeleteContact}>\n        Delete <AiOutlineUserDelete size=\"15px\" />\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClickDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import s from './ContactsList.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n  const contacts = useSelector(getVisibleContacts);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          contactName={name}\n          contactNumber={number}\n          onClickDeleteContact={() => onDeleteContact(id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport * as contactsActions from 'redux/actions';\n\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filterLabel}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import ContactForm from '../FormContact/FormContact';\nimport ContactList from '../ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\nimport './app.scss';\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  deleteContactSuccess,\n  changeFilter,\n  fetchContactsSuccess,\n} from './actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport contactsReducer from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}